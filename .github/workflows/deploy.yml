name: 🚀 Deploy to Free Cloud Platforms

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_REGISTRY: ranimmn
  PROJECT_NAME: ranouma

jobs:
  # Tests et validation (simplifié pour déploiement rapide)
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Skip tests for rapid deployment
        run: echo "Tests skipped - ready for Railway deployment"

  # Build et push des images Docker
  build:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      version: ${{ steps.meta-backend.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📝 Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}
          tags: |
            type=ref,event=branch,suffix=-backend
            type=ref,event=pr,suffix=-backend
            type=sha,suffix=-backend
            type=raw,value=backend-latest,enable={{is_default_branch}}

      - name: 📝 Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}
          tags: |
            type=ref,event=branch,suffix=-frontend
            type=ref,event=pr,suffix=-frontend
            type=sha,suffix=-frontend
            type=raw,value=frontend-latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-admin
          file: ./frontend-admin/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Déploiement Railway
  deploy-railway:
    name: 🚂 Deploy to Railway
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: railway-${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy-railway.outputs.url }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚂 Deploy Backend to Railway
        id: deploy-backend
        uses: railwayapp/railway-deploy@v3
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: backend
          dockerfile: backend/Dockerfile.railway
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: production

      - name: 🌐 Deploy Frontend to Railway
        id: deploy-frontend
        uses: railwayapp/railway-deploy@v3
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: frontend
          dockerfile: frontend-admin/Dockerfile.railway
        env:
          VITE_API_URL: ${{ steps.deploy-backend.outputs.url }}
          NODE_ENV: production

      - name: 📊 Health Check
        run: |
          sleep 30
          curl -f ${{ steps.deploy-backend.outputs.url }}/health
          curl -f ${{ steps.deploy-frontend.outputs.url }}/health

  # Déploiement Render
  deploy-render:
    name: 🎨 Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: render-${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎨 Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Déploiement Fly.io
  deploy-fly:
    name: 🪰 Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: fly-${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🪰 Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 🚀 Deploy Backend to Fly.io
        run: |
          cd backend
          flyctl deploy --dockerfile Dockerfile.railway --app ${{ secrets.FLY_BACKEND_APP }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🌐 Deploy Frontend to Fly.io
        run: |
          cd frontend-admin
          flyctl deploy --dockerfile Dockerfile.railway --app ${{ secrets.FLY_FRONTEND_APP }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
