# Script de test automatis√© complet
# Usage: .\scripts\test-complete-system.ps1

param(
    [switch]$Verbose = $false,
    [switch]$FixIssues = $false
)

Write-Host "üß™ TEST AUTOMATIS√â COMPLET - SYST√àME FINAL" -ForegroundColor Cyan
Write-Host "=" * 70
Write-Host "Date: $(Get-Date)" -ForegroundColor Yellow
Write-Host "Mode Verbose: $Verbose" -ForegroundColor Yellow
Write-Host "Auto-Fix: $FixIssues" -ForegroundColor Yellow
Write-Host ""

# Fonction pour afficher les √©tapes
function Write-Step {
    param([string]$Message)
    Write-Host "üìã $Message" -ForegroundColor Green
}

# Fonction pour les tests
function Test-Endpoint {
    param([string]$Url, [string]$Description)
    
    try {
        $response = Invoke-RestMethod -Uri $Url -Method Get -TimeoutSec 5
        Write-Host "‚úÖ $Description : OK" -ForegroundColor Green
        if ($Verbose) {
            Write-Host "   Response: $($response | ConvertTo-Json -Compress)" -ForegroundColor Gray
        }
        return $true
    } catch {
        Write-Host "‚ùå $Description : √âCHEC" -ForegroundColor Red
        if ($Verbose) {
            Write-Host "   Erreur: $($_.Exception.Message)" -ForegroundColor Gray
        }
        return $false
    }
}

# Variables de test
$backendLocalhost = "http://localhost:3000"
$backendIP = "http://192.168.100.187:3000"
$testResults = @{}

# 1. TESTS BACKEND DOCKER
Write-Step "Tests Backend Docker..."

Write-Host "üîç Test 1: Ping localhost..." -ForegroundColor Yellow
$testResults["backend_localhost_ping"] = Test-Endpoint "$backendLocalhost/test/ping" "Backend localhost ping"

Write-Host "üîç Test 2: Ping IP PC..." -ForegroundColor Yellow
$testResults["backend_ip_ping"] = Test-Endpoint "$backendIP/test/ping" "Backend IP PC ping"

Write-Host "üîç Test 3: API Cat√©gories localhost..." -ForegroundColor Yellow
$testResults["backend_localhost_categories"] = Test-Endpoint "$backendLocalhost/categories" "API Cat√©gories localhost"

Write-Host "üîç Test 4: API Cat√©gories IP PC..." -ForegroundColor Yellow
$testResults["backend_ip_categories"] = Test-Endpoint "$backendIP/categories" "API Cat√©gories IP PC"

Write-Host "üîç Test 5: Image statique..." -ForegroundColor Yellow
try {
    $imageResponse = Invoke-WebRequest -Uri "$backendLocalhost/public/images/image-1748895816150-207160491.png" -Method Head -TimeoutSec 5
    if ($imageResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Image statique : OK (Taille: $($imageResponse.Headers.'Content-Length') bytes)" -ForegroundColor Green
        $testResults["backend_static_image"] = $true
    } else {
        Write-Host "‚ùå Image statique : Code $($imageResponse.StatusCode)" -ForegroundColor Red
        $testResults["backend_static_image"] = $false
    }
} catch {
    Write-Host "‚ùå Image statique : √âCHEC" -ForegroundColor Red
    $testResults["backend_static_image"] = $false
}

# 2. TESTS DOCKER
Write-Step "Tests Infrastructure Docker..."

Write-Host "üîç Test 6: Statut conteneur..." -ForegroundColor Yellow
try {
    $containers = docker ps --filter "name=admin_backend" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    if ($containers -match "admin_backend") {
        Write-Host "‚úÖ Conteneur backend : ACTIF" -ForegroundColor Green
        if ($Verbose) {
            Write-Host "   $containers" -ForegroundColor Gray
        }
        $testResults["docker_container_status"] = $true
    } else {
        Write-Host "‚ùå Conteneur backend : INACTIF" -ForegroundColor Red
        $testResults["docker_container_status"] = $false
    }
} catch {
    Write-Host "‚ùå Conteneur backend : ERREUR" -ForegroundColor Red
    $testResults["docker_container_status"] = $false
}

Write-Host "üîç Test 7: Logs Docker..." -ForegroundColor Yellow
try {
    $logs = docker logs admin_backend_final --tail 10 2>&1
    if ($logs -match "Nest application successfully started" -or $logs -match "Backend fonctionne") {
        Write-Host "‚úÖ Logs Docker : Backend d√©marr√© correctement" -ForegroundColor Green
        $testResults["docker_logs"] = $true
    } else {
        Write-Host "‚ùå Logs Docker : Backend non d√©marr√©" -ForegroundColor Red
        $testResults["docker_logs"] = $false
    }
    
    if ($Verbose) {
        Write-Host "   Derniers logs:" -ForegroundColor Gray
        $logs | Select-Object -Last 5 | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
    }
} catch {
    Write-Host "‚ùå Logs Docker : INACCESSIBLES" -ForegroundColor Red
    $testResults["docker_logs"] = $false
}

# 3. TESTS R√âSEAU
Write-Step "Tests R√©seau et Connectivit√©..."

Write-Host "üîç Test 8: Port 3000 ouvert..." -ForegroundColor Yellow
try {
    $portTest = Test-NetConnection -ComputerName "localhost" -Port 3000 -WarningAction SilentlyContinue
    if ($portTest.TcpTestSucceeded) {
        Write-Host "‚úÖ Port 3000 : OUVERT" -ForegroundColor Green
        $testResults["network_port_3000"] = $true
    } else {
        Write-Host "‚ùå Port 3000 : FERM√â" -ForegroundColor Red
        $testResults["network_port_3000"] = $false
    }
} catch {
    Write-Host "‚ùå Port 3000 : TEST √âCHOU√â" -ForegroundColor Red
    $testResults["network_port_3000"] = $false
}

Write-Host "üîç Test 9: IP PC accessible..." -ForegroundColor Yellow
try {
    $pingTest = Test-Connection -ComputerName "192.168.100.187" -Count 1 -Quiet
    if ($pingTest) {
        Write-Host "‚úÖ IP PC 192.168.100.187 : ACCESSIBLE" -ForegroundColor Green
        $testResults["network_ip_accessible"] = $true
    } else {
        Write-Host "‚ùå IP PC 192.168.100.187 : INACCESSIBLE" -ForegroundColor Red
        $testResults["network_ip_accessible"] = $false
    }
} catch {
    Write-Host "‚ùå IP PC : TEST √âCHOU√â" -ForegroundColor Red
    $testResults["network_ip_accessible"] = $false
}

# 4. TESTS BASE DE DONN√âES
Write-Step "Tests Base de Donn√©es..."

Write-Host "üîç Test 10: Connexion Prisma..." -ForegroundColor Yellow
try {
    $dbLogs = docker logs admin_backend_final 2>&1 | Select-String "Prisma connected"
    if ($dbLogs) {
        Write-Host "‚úÖ Base de donn√©es : CONNECT√âE" -ForegroundColor Green
        $testResults["database_connection"] = $true
    } else {
        Write-Host "‚ùå Base de donn√©es : NON CONNECT√âE" -ForegroundColor Red
        $testResults["database_connection"] = $false
    }
} catch {
    Write-Host "‚ùå Base de donn√©es : TEST √âCHOU√â" -ForegroundColor Red
    $testResults["database_connection"] = $false
}

# 5. TESTS MOBILE (si disponible)
Write-Step "Tests Configuration Mobile..."

Write-Host "üîç Test 11: Configuration mobile..." -ForegroundColor Yellow
if (Test-Path "mobile/services/GlobalIPManager.js") {
    Write-Host "‚úÖ GlobalIPManager : PR√âSENT" -ForegroundColor Green
    $testResults["mobile_config"] = $true
} else {
    Write-Host "‚ùå GlobalIPManager : ABSENT" -ForegroundColor Red
    $testResults["mobile_config"] = $false
}

Write-Host "üîç Test 12: D√©pendances mobile..." -ForegroundColor Yellow
if (Test-Path "mobile/node_modules") {
    Write-Host "‚úÖ D√©pendances mobile : INSTALL√âES" -ForegroundColor Green
    $testResults["mobile_dependencies"] = $true
} else {
    Write-Host "‚ùå D√©pendances mobile : NON INSTALL√âES" -ForegroundColor Red
    $testResults["mobile_dependencies"] = $false
}

# 6. AUTO-FIX (si activ√©)
if ($FixIssues) {
    Write-Step "Correction automatique des probl√®mes..."
    
    if (-not $testResults["docker_container_status"]) {
        Write-Host "üîß Red√©marrage du conteneur backend..." -ForegroundColor Yellow
        docker run -d -p 3000:3000 `
            -e DATABASE_URL="postgresql://postgres:Azerty123*@host.docker.internal:5432/adminapp?schema=public" `
            --name admin_backend_final_fixed `
            ranimmn/ranouma:backend-final-18-06-2025
        Start-Sleep -Seconds 10
    }
    
    if (-not $testResults["mobile_dependencies"]) {
        Write-Host "üîß Installation des d√©pendances mobile..." -ForegroundColor Yellow
        Push-Location "mobile"
        npm install
        Pop-Location
    }
}

# 7. R√âSUM√â DES R√âSULTATS
Write-Host ""
Write-Host "=" * 70
Write-Host "üìä R√âSUM√â DES TESTS" -ForegroundColor Cyan
Write-Host "=" * 70

$totalTests = $testResults.Count
$passedTests = ($testResults.Values | Where-Object { $_ -eq $true }).Count
$failedTests = $totalTests - $passedTests

Write-Host "üìà Statistiques:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Total des tests: $totalTests" -ForegroundColor White
Write-Host "   ‚Ä¢ Tests r√©ussis: $passedTests" -ForegroundColor Green
Write-Host "   ‚Ä¢ Tests √©chou√©s: $failedTests" -ForegroundColor Red
Write-Host "   ‚Ä¢ Taux de r√©ussite: $([math]::Round(($passedTests / $totalTests) * 100, 1))%" -ForegroundColor Yellow

Write-Host ""
Write-Host "üìã D√©tail des r√©sultats:" -ForegroundColor Yellow
foreach ($test in $testResults.GetEnumerator()) {
    $status = if ($test.Value) { "‚úÖ PASS" } else { "‚ùå FAIL" }
    $color = if ($test.Value) { "Green" } else { "Red" }
    Write-Host "   $($test.Key): $status" -ForegroundColor $color
}

# 8. RECOMMANDATIONS
Write-Host ""
Write-Host "üéØ RECOMMANDATIONS:" -ForegroundColor Cyan

if ($passedTests -eq $totalTests) {
    Write-Host "üéâ PARFAIT ! Tous les tests passent !" -ForegroundColor Green
    Write-Host "   ‚Ä¢ Votre syst√®me est enti√®rement fonctionnel" -ForegroundColor White
    Write-Host "   ‚Ä¢ Vous pouvez proc√©der au build final de l'APK" -ForegroundColor White
    Write-Host "   ‚Ä¢ Commande: .\scripts\build-final-apk.ps1" -ForegroundColor White
} elseif ($passedTests / $totalTests -gt 0.8) {
    Write-Host "‚úÖ TR√àS BIEN ! La plupart des tests passent" -ForegroundColor Green
    Write-Host "   ‚Ä¢ Syst√®me globalement fonctionnel" -ForegroundColor White
    Write-Host "   ‚Ä¢ Quelques ajustements mineurs n√©cessaires" -ForegroundColor White
} elseif ($passedTests / $totalTests -gt 0.5) {
    Write-Host "‚ö†Ô∏è MOYEN. Plusieurs probl√®mes d√©tect√©s" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ V√©rifiez les tests √©chou√©s" -ForegroundColor White
    Write-Host "   ‚Ä¢ Relancez avec --FixIssues pour correction automatique" -ForegroundColor White
} else {
    Write-Host "‚ùå PROBL√àMES MAJEURS d√©tect√©s" -ForegroundColor Red
    Write-Host "   ‚Ä¢ Syst√®me non fonctionnel" -ForegroundColor White
    Write-Host "   ‚Ä¢ V√©rifiez la configuration Docker" -ForegroundColor White
    Write-Host "   ‚Ä¢ Consultez les logs: docker logs admin_backend_final" -ForegroundColor White
}

Write-Host ""
Write-Host "üìû Support:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Logs d√©taill√©s: .\scripts\test-complete-system.ps1 -Verbose" -ForegroundColor White
Write-Host "   ‚Ä¢ Correction auto: .\scripts\test-complete-system.ps1 -FixIssues" -ForegroundColor White
Write-Host "   ‚Ä¢ Guide complet: TESTING_GUIDE.md" -ForegroundColor White

Write-Host ""
