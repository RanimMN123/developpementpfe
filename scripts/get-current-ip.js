#!/usr/bin/env node

/**
 * Script pour obtenir l'adresse IP actuelle du PC
 * Utile pour configurer le mobile
 */

const os = require('os');
const { execSync } = require('child_process');

console.log('üîç D√âTECTION DE L\'ADRESSE IP ACTUELLE');
console.log('='.repeat(50));

/**
 * Obtenir toutes les interfaces r√©seau
 */
function getNetworkInterfaces() {
  const interfaces = os.networkInterfaces();
  const results = [];

  for (const [name, addresses] of Object.entries(interfaces)) {
    for (const addr of addresses) {
      // Ignorer les adresses de loopback et non-IPv4
      if (addr.family === 'IPv4' && !addr.internal) {
        results.push({
          interface: name,
          address: addr.address,
          netmask: addr.netmask,
          mac: addr.mac
        });
      }
    }
  }

  return results;
}

/**
 * D√©tecter l'interface active (avec acc√®s Internet)
 */
function getActiveInterface() {
  try {
    // Essayer de ping Google pour d√©tecter l'interface active
    const result = execSync('ping -n 1 8.8.8.8', { encoding: 'utf8', timeout: 5000 });
    
    // Extraire l'IP source utilis√©e
    const interfaces = getNetworkInterfaces();
    
    // Retourner la premi√®re interface non-loopback
    return interfaces.find(iface => 
      iface.address.startsWith('192.168.') || 
      iface.address.startsWith('10.') || 
      iface.address.startsWith('172.')
    );
  } catch (error) {
    // En cas d'erreur, retourner la premi√®re interface trouv√©e
    const interfaces = getNetworkInterfaces();
    return interfaces[0];
  }
}

/**
 * Fonction principale
 */
function main() {
  const interfaces = getNetworkInterfaces();
  const activeInterface = getActiveInterface();

  console.log('üì° Interfaces r√©seau d√©tect√©es:');
  console.log('-'.repeat(30));

  if (interfaces.length === 0) {
    console.log('‚ùå Aucune interface r√©seau active trouv√©e');
    return;
  }

  interfaces.forEach((iface, index) => {
    const isActive = activeInterface && iface.address === activeInterface.address;
    const marker = isActive ? 'üü¢' : '‚ö™';
    
    console.log(`${marker} ${iface.interface}`);
    console.log(`   IP: ${iface.address}`);
    console.log(`   Masque: ${iface.netmask}`);
    console.log(`   MAC: ${iface.mac}`);
    
    if (isActive) {
      console.log('   ‚úÖ INTERFACE ACTIVE');
    }
    console.log('');
  });

  if (activeInterface) {
    console.log('üéØ CONFIGURATION RECOMMAND√âE POUR LE MOBILE:');
    console.log('='.repeat(50));
    console.log(`üì± IP du PC: ${activeInterface.address}`);
    console.log(`üñ•Ô∏è  Backend: http://${activeInterface.address}:3000`);
    console.log(`üåê Frontend: http://${activeInterface.address}:3001`);
    console.log('');

    // D√©terminer le type de r√©seau
    const ip = activeInterface.address;
    let networkType = 'Inconnu';
    let suggestedStaticIP = '';

    if (ip.startsWith('192.168.1.')) {
      networkType = 'R√©seau domestique standard (192.168.1.x)';
      suggestedStaticIP = '192.168.1.100';
    } else if (ip.startsWith('192.168.0.')) {
      networkType = 'R√©seau domestique alternatif (192.168.0.x)';
      suggestedStaticIP = '192.168.0.100';
    } else if (ip.startsWith('10.')) {
      networkType = 'R√©seau d\'entreprise (10.x.x.x)';
      suggestedStaticIP = ip.substring(0, ip.lastIndexOf('.')) + '.100';
    } else if (ip.startsWith('172.')) {
      networkType = 'R√©seau priv√© (172.x.x.x)';
      suggestedStaticIP = ip.substring(0, ip.lastIndexOf('.')) + '.100';
    }

    console.log(`üè† Type de r√©seau: ${networkType}`);
    console.log(`üí° IP statique sugg√©r√©e: ${suggestedStaticIP}`);
    console.log('');

    // G√©n√©rer la configuration pour le mobile
    console.log('üìã CONFIGURATION MOBILE:');
    console.log('-'.repeat(30));
    console.log('Copiez cette configuration dans votre application mobile:');
    console.log('');
    console.log(`BASE_URL: "http://${activeInterface.address}:3000"`);
    console.log('');

    // Tester la connectivit√© du backend
    console.log('üß™ TEST DE CONNECTIVIT√â:');
    console.log('-'.repeat(30));
    
    try {
      const testResult = execSync(`powershell -Command "(Invoke-WebRequest -Uri 'http://${activeInterface.address}:3000/health' -TimeoutSec 5).StatusCode"`, {
        encoding: 'utf8',
        timeout: 10000
      });
      
      if (testResult.trim() === '200') {
        console.log('‚úÖ Backend accessible et fonctionnel');
      } else {
        console.log('‚ö†Ô∏è  Backend r√©pond mais statut inattendu:', testResult.trim());
      }
    } catch (error) {
      console.log('‚ùå Backend non accessible');
      console.log('üí° Assurez-vous que le backend est d√©marr√©: npm run start');
    }

  } else {
    console.log('‚ùå Impossible de d√©tecter l\'interface active');
  }

  console.log('');
  console.log('üí° CONSEILS:');
  console.log('‚Ä¢ Pour une IP fixe, utilisez: scripts/setup-fixed-ip.bat');
  console.log('‚Ä¢ Pour v√©rifier manuellement: ipconfig');
  console.log('‚Ä¢ Red√©marrez ce script apr√®s changement de r√©seau');
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur:', error.message);
  process.exit(1);
});

// Ex√©cution
if (require.main === module) {
  main();
}
