# Script de d√©ploiement automatis√© pour l'application Admin
# Usage: .\scripts\deploy.ps1

param(
    [string]$Environment = "development",
    [switch]$SkipBuild = $false,
    [switch]$SkipTests = $false,
    [switch]$Force = $false
)

Write-Host "üöÄ D√âPLOIEMENT APPLICATION ADMIN" -ForegroundColor Cyan
Write-Host "=" * 60
Write-Host "Environnement: $Environment" -ForegroundColor Yellow
Write-Host "Date: $(Get-Date)" -ForegroundColor Yellow
Write-Host ""

# Fonction pour afficher les √©tapes
function Write-Step {
    param([string]$Message)
    Write-Host "üìã $Message" -ForegroundColor Green
}

# Fonction pour g√©rer les erreurs
function Handle-Error {
    param([string]$Message)
    Write-Host "‚ùå ERREUR: $Message" -ForegroundColor Red
    exit 1
}

# V√©rifier les pr√©requis
Write-Step "V√©rification des pr√©requis..."

try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
} catch {
    Handle-Error "Docker n'est pas install√© ou accessible"
}

try {
    $composeVersion = docker compose version
    Write-Host "‚úÖ Docker Compose: $composeVersion" -ForegroundColor Green
} catch {
    Handle-Error "Docker Compose n'est pas disponible"
}

# Arr√™ter les services existants
Write-Step "Arr√™t des services existants..."
docker-compose down --remove-orphans
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è Aucun service √† arr√™ter ou erreur mineure" -ForegroundColor Yellow
}

# Nettoyer si demand√©
if ($Force) {
    Write-Step "Nettoyage forc√© des ressources Docker..."
    docker system prune -f
    docker volume prune -f
}

# Construire les images si n√©cessaire
if (-not $SkipBuild) {
    Write-Step "Construction des images Docker..."
    
    # Backend
    Write-Host "üî® Construction du backend..." -ForegroundColor Yellow
    docker build -t ranimmn/ranouma:backend-latest ./backend
    if ($LASTEXITCODE -ne 0) {
        Handle-Error "√âchec de la construction du backend"
    }
    
    Write-Host "‚úÖ Backend construit avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è Construction ignor√©e (--SkipBuild)" -ForegroundColor Yellow
}

# Tests (si activ√©s)
if (-not $SkipTests) {
    Write-Step "Ex√©cution des tests..."
    
    # Test de connectivit√© des images
    Write-Host "üß™ Test des images Docker..." -ForegroundColor Yellow
    
    $testBackend = docker run --rm --entrypoint sh ranimmn/ranouma:backend-latest -c "node --version"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Image backend valide" -ForegroundColor Green
    } else {
        Handle-Error "Image backend invalide"
    }
} else {
    Write-Host "‚è≠Ô∏è Tests ignor√©s (--SkipTests)" -ForegroundColor Yellow
}

# Configuration de l'environnement
Write-Step "Configuration de l'environnement $Environment..."

$envFile = ".env.$Environment"
if (Test-Path $envFile) {
    Write-Host "‚úÖ Fichier d'environnement trouv√©: $envFile" -ForegroundColor Green
    Copy-Item $envFile ".env" -Force
} else {
    Write-Host "‚ö†Ô∏è Aucun fichier d'environnement sp√©cifique, utilisation des valeurs par d√©faut" -ForegroundColor Yellow
}

# D√©marrage des services
Write-Step "D√©marrage des services..."

docker-compose up -d
if ($LASTEXITCODE -ne 0) {
    Handle-Error "√âchec du d√©marrage des services"
}

# Attendre que les services soient pr√™ts
Write-Step "Attente du d√©marrage des services..."
Start-Sleep -Seconds 15

# V√©rification de la sant√© des services
Write-Step "V√©rification de la sant√© des services..."

$maxRetries = 10
$retryCount = 0

do {
    $retryCount++
    Write-Host "Tentative $retryCount/$maxRetries..." -ForegroundColor Yellow
    
    try {
        # Test backend
        $backendResponse = Invoke-RestMethod -Uri "http://localhost:3000/test/ping" -Method Get -TimeoutSec 5
        $backendOK = $true
        Write-Host "‚úÖ Backend: OK" -ForegroundColor Green
    } catch {
        $backendOK = $false
        Write-Host "‚ùå Backend: Non accessible" -ForegroundColor Red
    }
    
    try {
        # Test frontend
        $frontendResponse = Invoke-WebRequest -Uri "http://localhost:3001" -Method Get -TimeoutSec 5
        $frontendOK = $frontendResponse.StatusCode -eq 200
        Write-Host "‚úÖ Frontend: OK" -ForegroundColor Green
    } catch {
        $frontendOK = $false
        Write-Host "‚ùå Frontend: Non accessible" -ForegroundColor Red
    }
    
    if ($backendOK -and $frontendOK) {
        break
    }
    
    if ($retryCount -lt $maxRetries) {
        Write-Host "‚è≥ Attente de 10 secondes avant nouvelle tentative..." -ForegroundColor Yellow
        Start-Sleep -Seconds 10
    }
} while ($retryCount -lt $maxRetries)

# R√©sultats finaux
Write-Host ""
Write-Host "=" * 60
if ($backendOK -and $frontendOK) {
    Write-Host "üéâ D√âPLOIEMENT R√âUSSI !" -ForegroundColor Green
    Write-Host "=" * 60
    Write-Host "üìä Services disponibles:" -ForegroundColor Cyan
    Write-Host "   üîó Backend API: http://localhost:3000" -ForegroundColor White
    Write-Host "   üåê Frontend Admin: http://localhost:3001" -ForegroundColor White
    Write-Host "   üì± Mobile: Auto-d√©couverte activ√©e" -ForegroundColor White
    Write-Host ""
    Write-Host "üìã Commandes utiles:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Logs: docker-compose logs -f" -ForegroundColor White
    Write-Host "   ‚Ä¢ Statut: docker-compose ps" -ForegroundColor White
    Write-Host "   ‚Ä¢ Arr√™ter: docker-compose down" -ForegroundColor White
    Write-Host "   ‚Ä¢ Red√©marrer: docker-compose restart" -ForegroundColor White
} else {
    Write-Host "‚ùå D√âPLOIEMENT √âCHOU√â" -ForegroundColor Red
    Write-Host "=" * 60
    Write-Host "üìã Diagnostic:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ V√©rifiez les logs: docker-compose logs -f" -ForegroundColor White
    Write-Host "   ‚Ä¢ V√©rifiez le statut: docker-compose ps" -ForegroundColor White
    Write-Host "   ‚Ä¢ Red√©marrez: docker-compose restart" -ForegroundColor White
    
    # Afficher les logs en cas d'erreur
    Write-Host ""
    Write-Host "üìã Logs r√©cents:" -ForegroundColor Yellow
    docker-compose logs --tail=20
    
    exit 1
}

Write-Host ""
Write-Host "‚úÖ D√©ploiement termin√© avec succ√®s !" -ForegroundColor Green
