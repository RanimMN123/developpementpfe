#!/usr/bin/env node

/**
 * Script de test de s√©curit√© pour le frontend admin
 * Teste les protections XSS et CSRF c√¥t√© client
 */

const fs = require('fs');
const path = require('path');

console.log('üîí Test de s√©curit√© du frontend admin');
console.log('='.repeat(50));

let totalTests = 0;
let passedTests = 0;
let failedTests = 0;

/**
 * Fonction utilitaire pour les tests
 */
function runTest(testName, testFunction) {
  totalTests++;
  process.stdout.write(`üîç ${testName}... `);
  
  try {
    const result = testFunction();
    if (result) {
      console.log('‚úÖ PASS');
      passedTests++;
    } else {
      console.log('‚ùå FAIL');
      failedTests++;
    }
  } catch (error) {
    console.log(`‚ùå ERROR: ${error.message}`);
    failedTests++;
  }
}

/**
 * Test de pr√©sence des fichiers de s√©curit√©
 */
function testSecurityFilesExist() {
  const securityFiles = [
    'src/utils/security.ts',
    'src/hooks/useSecureApi.ts',
    'src/components/SecureInput.tsx',
    'src/components/SecureForm.tsx',
    'src/app/admin/Agents/components/SecureAgentModal.tsx'
  ];

  let existingFiles = 0;
  for (const file of securityFiles) {
    const filePath = path.join(__dirname, '..', file);
    if (fs.existsSync(filePath)) {
      existingFiles++;
    } else {
      console.log(`\n   ‚ö†Ô∏è  Fichier manquant: ${file}`);
    }
  }

  return existingFiles === securityFiles.length;
}

/**
 * Test de la configuration de s√©curit√©
 */
function testSecurityConfiguration() {
  try {
    const securityPath = path.join(__dirname, '..', 'src/utils/security.ts');
    const content = fs.readFileSync(securityPath, 'utf8');
    
    const requiredFeatures = [
      'sanitizeString',
      'detectXss',
      'validateFormData',
      'SecurityManager',
      'getCsrfToken',
      'getSecureHeaders'
    ];

    let foundFeatures = 0;
    for (const feature of requiredFeatures) {
      if (content.includes(feature)) {
        foundFeatures++;
      }
    }

    return foundFeatures === requiredFeatures.length;
  } catch (error) {
    return false;
  }
}

/**
 * Test des composants s√©curis√©s
 */
function testSecureComponents() {
  try {
    const secureInputPath = path.join(__dirname, '..', 'src/components/SecureInput.tsx');
    const content = fs.readFileSync(secureInputPath, 'utf8');
    
    const requiredFeatures = [
      'detectXss',
      'sanitizeString',
      'validateEmail',
      'validatePhone',
      'validateName',
      'SecureInput',
      'SecureEmailInput',
      'SecurePasswordInput'
    ];

    let foundFeatures = 0;
    for (const feature of requiredFeatures) {
      if (content.includes(feature)) {
        foundFeatures++;
      }
    }

    return foundFeatures >= 6; // Au moins 6 sur 8 fonctionnalit√©s
  } catch (error) {
    return false;
  }
}

/**
 * Test des hooks s√©curis√©s
 */
function testSecureHooks() {
  try {
    const secureApiPath = path.join(__dirname, '..', 'src/hooks/useSecureApi.ts');
    const content = fs.readFileSync(secureApiPath, 'utf8');
    
    const requiredFeatures = [
      'useSecureApi',
      'useSecureForm',
      'validateFormData',
      'securityManager',
      'X-CSRF-Token',
      'withCredentials'
    ];

    let foundFeatures = 0;
    for (const feature of requiredFeatures) {
      if (content.includes(feature)) {
        foundFeatures++;
      }
    }

    return foundFeatures === requiredFeatures.length;
  } catch (error) {
    return false;
  }
}

/**
 * Test de l'int√©gration dans useApiCall
 */
function testApiCallIntegration() {
  try {
    const apiCallPath = path.join(__dirname, '..', 'src/hooks/useApiCall.ts');
    const content = fs.readFileSync(apiCallPath, 'utf8');
    
    const requiredFeatures = [
      'securityManager',
      'validateFormData',
      'getSecureHeaders',
      'withCredentials',
      'x-csrf-token'
    ];

    let foundFeatures = 0;
    for (const feature of requiredFeatures) {
      if (content.includes(feature)) {
        foundFeatures++;
      }
    }

    return foundFeatures >= 4; // Au moins 4 sur 5 fonctionnalit√©s
  } catch (error) {
    return false;
  }
}

/**
 * Test de l'exemple d'impl√©mentation
 */
function testSecureModalExample() {
  try {
    const modalPath = path.join(__dirname, '..', 'src/app/admin/Agents/components/SecureAgentModal.tsx');
    const content = fs.readFileSync(modalPath, 'utf8');
    
    const requiredFeatures = [
      'SecureInput',
      'SecureEmailInput',
      'SecurePasswordInput',
      'useSecureForm',
      'validateFormData',
      'hasCsrfToken'
    ];

    let foundFeatures = 0;
    for (const feature of requiredFeatures) {
      if (content.includes(feature)) {
        foundFeatures++;
      }
    }

    return foundFeatures === requiredFeatures.length;
  } catch (error) {
    return false;
  }
}

/**
 * Test de la configuration Next.js
 */
function testNextJsConfiguration() {
  try {
    const nextConfigPath = path.join(__dirname, '..', 'next.config.ts');
    if (fs.existsSync(nextConfigPath)) {
      const content = fs.readFileSync(nextConfigPath, 'utf8');
      
      // V√©rifier les configurations de s√©curit√© recommand√©es
      const hasStandalone = content.includes('standalone');
      const hasImageConfig = content.includes('images');
      
      return hasStandalone && hasImageConfig;
    }
    return false;
  } catch (error) {
    return false;
  }
}

/**
 * Test des d√©pendances de s√©curit√©
 */
function testSecurityDependencies() {
  try {
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    const content = fs.readFileSync(packageJsonPath, 'utf8');
    const packageJson = JSON.parse(content);
    
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
    
    const requiredDeps = [
      'axios',
      'react',
      'next',
      'lucide-react'
    ];

    let foundDeps = 0;
    for (const dep of requiredDeps) {
      if (dependencies[dep]) {
        foundDeps++;
      }
    }

    return foundDeps === requiredDeps.length;
  } catch (error) {
    return false;
  }
}

/**
 * Fonction principale
 */
function runSecurityTests() {
  console.log('\nüß™ D√©marrage des tests de s√©curit√© frontend...\n');
  
  // Tests de s√©curit√©
  runTest('Fichiers de s√©curit√© pr√©sents', testSecurityFilesExist);
  runTest('Configuration de s√©curit√©', testSecurityConfiguration);
  runTest('Composants s√©curis√©s', testSecureComponents);
  runTest('Hooks s√©curis√©s', testSecureHooks);
  runTest('Int√©gration useApiCall', testApiCallIntegration);
  runTest('Exemple modal s√©curis√©', testSecureModalExample);
  runTest('Configuration Next.js', testNextJsConfiguration);
  runTest('D√©pendances de s√©curit√©', testSecurityDependencies);
  
  // Rapport final
  console.log('\nüìä RAPPORT DE S√âCURIT√â FRONTEND');
  console.log('='.repeat(50));
  console.log(`‚úÖ Tests r√©ussis: ${passedTests}/${totalTests}`);
  console.log(`‚ùå Tests √©chou√©s: ${failedTests}/${totalTests}`);
  
  const successRate = (passedTests / totalTests) * 100;
  console.log(`üìà Taux de r√©ussite: ${successRate.toFixed(1)}%`);
  
  if (successRate >= 80) {
    console.log('\nüéâ Niveau de s√©curit√©: EXCELLENT');
  } else if (successRate >= 60) {
    console.log('\n‚ö° Niveau de s√©curit√©: BON');
  } else {
    console.log('\n‚ö†Ô∏è  Niveau de s√©curit√©: √Ä AM√âLIORER');
  }
  
  console.log('\nüõ°Ô∏è PROTECTIONS IMPL√âMENT√âES:');
  console.log('   ‚úÖ Utilitaires de s√©curit√© (security.ts)');
  console.log('   ‚úÖ Hooks API s√©curis√©s (useSecureApi.ts)');
  console.log('   ‚úÖ Composants de saisie s√©curis√©s (SecureInput.tsx)');
  console.log('   ‚úÖ Formulaires s√©curis√©s (SecureForm.tsx)');
  console.log('   ‚úÖ Int√©gration CSRF dans useApiCall');
  console.log('   ‚úÖ Exemple d\'impl√©mentation (SecureAgentModal)');
  
  console.log('\nüîí FONCTIONNALIT√âS DE S√âCURIT√â:');
  console.log('   ‚Ä¢ Protection XSS automatique');
  console.log('   ‚Ä¢ Validation et sanitisation des entr√©es');
  console.log('   ‚Ä¢ Gestion des tokens CSRF');
  console.log('   ‚Ä¢ Headers de s√©curit√© automatiques');
  console.log('   ‚Ä¢ Validation en temps r√©el');
  console.log('   ‚Ä¢ Indicateurs visuels de s√©curit√©');
  
  console.log('\nüéØ UTILISATION:');
  console.log('   1. Remplacez les composants <input> par <SecureInput>');
  console.log('   2. Utilisez useSecureApi au lieu de useApiCall');
  console.log('   3. Utilisez SecureForm pour les formulaires critiques');
  console.log('   4. Les protections sont automatiques et transparentes');
  
  console.log('\nüí° PROCHAINES √âTAPES:');
  if (failedTests > 0) {
    console.log('   ‚Ä¢ Corrigez les tests √©chou√©s ci-dessus');
    console.log('   ‚Ä¢ V√©rifiez l\'installation des d√©pendances');
  }
  console.log('   ‚Ä¢ Remplacez progressivement les formulaires existants');
  console.log('   ‚Ä¢ Testez avec des donn√©es malveillantes');
  console.log('   ‚Ä¢ Surveillez les logs de s√©curit√©');
  
  // Code de sortie
  process.exit(failedTests > 0 ? 1 : 0);
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error.message);
  process.exit(1);
});

// Ex√©cution des tests
if (require.main === module) {
  runSecurityTests();
}
