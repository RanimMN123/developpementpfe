#!/usr/bin/env node

/**
 * Script de d√©marrage s√©curis√© pour le backend
 * V√©rifie la configuration de s√©curit√© avant de lancer le serveur
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîí D√©marrage s√©curis√© du backend');
console.log('='.repeat(50));

/**
 * V√©rifications de s√©curit√© pr√©-d√©marrage
 */
function performSecurityChecks() {
  console.log('\nüîç V√©rifications de s√©curit√©...\n');
  
  let checksPassedCount = 0;
  let totalChecks = 0;
  
  // V√©rification 1: Variables d'environnement
  totalChecks++;
  console.log('1Ô∏è‚É£ Variables d\'environnement...');
  
  const jwtSecret = process.env.JWT_SECRET;
  if (!jwtSecret || jwtSecret === 'defaultSecret' || jwtSecret === 'secretKey') {
    console.log('   ‚ö†Ô∏è  JWT_SECRET faible ou par d√©faut');
    console.log('   üí° D√©finissez une cl√© JWT forte dans .env');
  } else if (jwtSecret.length < 32) {
    console.log('   ‚ö†Ô∏è  JWT_SECRET trop courte (< 32 caract√®res)');
  } else {
    console.log('   ‚úÖ JWT_SECRET configur√©e correctement');
    checksPassedCount++;
  }
  
  // V√©rification 2: Fichiers de s√©curit√©
  totalChecks++;
  console.log('\n2Ô∏è‚É£ Fichiers de s√©curit√©...');
  
  const securityFiles = [
    'src/security/security.service.ts',
    'src/security/guards/csrf.guard.ts',
    'src/security/guards/rate-limit.guard.ts',
    'src/security/interceptors/xss-protection.interceptor.ts',
  ];
  
  let securityFilesPresent = 0;
  for (const file of securityFiles) {
    if (fs.existsSync(path.join(__dirname, '..', file))) {
      securityFilesPresent++;
    }
  }
  
  if (securityFilesPresent === securityFiles.length) {
    console.log('   ‚úÖ Tous les fichiers de s√©curit√© pr√©sents');
    checksPassedCount++;
  } else {
    console.log(`   ‚ö†Ô∏è  ${securityFilesPresent}/${securityFiles.length} fichiers de s√©curit√© pr√©sents`);
  }
  
  // V√©rification 3: Configuration de production
  totalChecks++;
  console.log('\n3Ô∏è‚É£ Configuration de production...');
  
  const nodeEnv = process.env.NODE_ENV;
  if (nodeEnv === 'production') {
    console.log('   ‚úÖ Mode production activ√©');
    
    // V√©rifications suppl√©mentaires pour la production
    if (jwtSecret && jwtSecret.length >= 32) {
      console.log('   ‚úÖ JWT s√©curis√© pour la production');
    } else {
      console.log('   ‚ùå JWT non s√©curis√© pour la production');
    }
    
    checksPassedCount++;
  } else {
    console.log('   ‚ö° Mode d√©veloppement');
    console.log('   üí° Utilisez NODE_ENV=production pour la production');
    checksPassedCount++; // OK en d√©veloppement
  }
  
  // V√©rification 4: D√©pendances de s√©curit√©
  totalChecks++;
  console.log('\n4Ô∏è‚É£ D√©pendances...');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
    
    const securityDeps = [
      '@nestjs/common',
      '@nestjs/core',
      'class-validator',
      'class-transformer',
    ];
    
    let depsPresent = 0;
    for (const dep of securityDeps) {
      if (dependencies[dep]) {
        depsPresent++;
      }
    }
    
    if (depsPresent === securityDeps.length) {
      console.log('   ‚úÖ D√©pendances de s√©curit√© pr√©sentes');
      checksPassedCount++;
    } else {
      console.log(`   ‚ö†Ô∏è  ${depsPresent}/${securityDeps.length} d√©pendances de s√©curit√© pr√©sentes`);
    }
  } catch (error) {
    console.log('   ‚ùå Erreur lors de la v√©rification des d√©pendances');
  }
  
  // V√©rification 5: Base de donn√©es
  totalChecks++;
  console.log('\n5Ô∏è‚É£ Base de donn√©es...');
  
  try {
    // V√©rifier si Prisma est configur√©
    if (fs.existsSync(path.join(__dirname, '..', 'prisma', 'schema.prisma'))) {
      console.log('   ‚úÖ Schema Prisma pr√©sent');
      checksPassedCount++;
    } else {
      console.log('   ‚ö†Ô∏è  Schema Prisma manquant');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur lors de la v√©rification de la base de donn√©es');
  }
  
  return { checksPassedCount, totalChecks };
}

/**
 * Test de connectivit√© rapide
 */
async function testConnectivity() {
  console.log('\nüåê Test de connectivit√©...');
  
  try {
    // D√©marrer le serveur en arri√®re-plan pour le test
    console.log('   üöÄ D√©marrage temporaire du serveur...');
    
    const serverProcess = execSync('npm run start', {
      cwd: path.join(__dirname, '..'),
      stdio: 'pipe',
      timeout: 10000,
    });
    
    console.log('   ‚úÖ Serveur d√©marr√© avec succ√®s');
    return true;
  } catch (error) {
    console.log('   ‚ùå Erreur de d√©marrage:', error.message);
    return false;
  }
}

/**
 * Affichage du rapport de s√©curit√©
 */
function displaySecurityReport(checksResult) {
  const { checksPassedCount, totalChecks } = checksResult;
  const successRate = (checksPassedCount / totalChecks) * 100;
  
  console.log('\nüìä RAPPORT DE S√âCURIT√â PR√â-D√âMARRAGE');
  console.log('='.repeat(50));
  console.log(`‚úÖ V√©rifications r√©ussies: ${checksPassedCount}/${totalChecks}`);
  console.log(`üìà Taux de r√©ussite: ${successRate.toFixed(1)}%`);
  
  if (successRate >= 80) {
    console.log('üéâ Niveau de s√©curit√©: EXCELLENT');
    console.log('‚úÖ Le serveur peut √™tre d√©marr√© en toute s√©curit√©');
    return true;
  } else if (successRate >= 60) {
    console.log('‚ö° Niveau de s√©curit√©: BON');
    console.log('‚ö†Ô∏è  Quelques am√©liorations recommand√©es');
    return true;
  } else {
    console.log('‚ùå Niveau de s√©curit√©: INSUFFISANT');
    console.log('üö´ D√©marrage non recommand√©');
    return false;
  }
}

/**
 * Affichage des recommandations
 */
function displayRecommendations() {
  console.log('\nüí° RECOMMANDATIONS DE S√âCURIT√â:');
  console.log('   ‚Ä¢ D√©finissez une cl√© JWT forte (32+ caract√®res)');
  console.log('   ‚Ä¢ Utilisez HTTPS en production');
  console.log('   ‚Ä¢ Configurez un pare-feu appropri√©');
  console.log('   ‚Ä¢ Surveillez les logs de s√©curit√©');
  console.log('   ‚Ä¢ Effectuez des tests de s√©curit√© r√©guliers');
  console.log('   ‚Ä¢ Mettez √† jour les d√©pendances r√©guli√®rement');
}

/**
 * D√©marrage du serveur
 */
function startServer() {
  console.log('\nüöÄ D√âMARRAGE DU SERVEUR...');
  console.log('='.repeat(50));
  
  try {
    console.log('üìç Commande: npm run start');
    console.log('üåê URL: http://localhost:3000');
    console.log('üìã Logs: Surveillez les messages de s√©curit√©');
    console.log('üîí Protections: XSS, CSRF, Rate Limiting actives');
    
    // D√©marrer le serveur
    execSync('npm run start', {
      cwd: path.join(__dirname, '..'),
      stdio: 'inherit',
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage:', error.message);
    process.exit(1);
  }
}

/**
 * Fonction principale
 */
async function main() {
  try {
    // V√©rifications de s√©curit√©
    const checksResult = performSecurityChecks();
    
    // Rapport de s√©curit√©
    const canStart = displaySecurityReport(checksResult);
    
    // Recommandations
    displayRecommendations();
    
    if (canStart) {
      console.log('\n‚è≥ D√©marrage dans 3 secondes...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // D√©marrer le serveur
      startServer();
    } else {
      console.log('\nüö´ D√©marrage annul√© pour des raisons de s√©curit√©');
      console.log('üí° Corrigez les probl√®mes identifi√©s et relancez');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage s√©curis√©:', error.message);
    process.exit(1);
  }
}

// Gestion des signaux
process.on('SIGINT', () => {
  console.log('\n\nüõë Arr√™t du serveur demand√©');
  console.log('üëã Au revoir !');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\nüõë Arr√™t du serveur (SIGTERM)');
  process.exit(0);
});

// Ex√©cution
if (require.main === module) {
  main();
}
